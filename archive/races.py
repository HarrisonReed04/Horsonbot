import discord
from discord.ext import commands
from database import emojis
class race_times(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.times = {
        "jay" : [36.864, 28.969, 28.15, 45.976, 32.884, 28.499, 28.762, 27.77, 31.089, 30.062, 28.215, 29.797, 28.221, 44.159, 38.283, 33.676, 37.517, 27.421, 30.238, 45.68, 28.89, 65.848, 29.978, 30.064, 35.885, 40.061, 36.19, 48.527, 28.646, 29.592, 28.214, 36.719, 30.582, 28.439, 37.781, 29.562, 33.71, 28.102, 27.985, 32.781, 34.747, 27.12, 71.001, 33.409, 40.787, 42.281, 27.634, 29.969, 39.163, 31.438, 29.776, 54.544, 32.625, 32.59, 29.003, 29.655, 29.926, 66.417, 30.302, 32.85, 28.401, 29.49, 29.458, 30.259, 43.091, 28.298, 32.28, 27.573, 27.666, 29.068, 27.503, 29.719, 31.748, 30.372, 62.82, 36.476, 28.823, 28.627, 31.377, 27.925, 28.394, 29.99, 98.042, 28.499, 28.168, 90.53, 27.991, 35.229, 57.084, 28.202, 43.95, 29.578, 32.163, 27.282, 34.156, 42.654, 36.197, 29.149, 43.587, 28.407, 28.018, 27.299, 26.182, 27.055, 26.253, 26.432, 29.21, 47.925, 27.503, 26.821, 26.263, 26.498, 27.025, 28.438, 26.112, 28.939, 28.621, 29.634, 27.61, 28.529, 30.65, 26.438, 26.429, 26.84, 33.097, 33.459, 35.205, 28.025, 28.617, 32.374, 29.29, 30.561, 33.186, 28.229, 28.952, 43.888, 28.752, 28.448, 27.348, 27.798, 30.128, 26.723, 26.901, 27.819, 29.901, 28.409, 28.393, 35.879, 27.065, 29.702, 86.019],
        "josh" : [36.887, 33.012, 32.125, 41.283, 30.157, 28.63, 28.812, 32.877, 31.259, 31.828, 28.884, 28.181, 36.571, 53.608, 36.114, 37.975, 29.237, 28.556, 47.167, 29.101, 47.692, 41.677, 32.345, 33.176, 39.03, 44.479, 29.048, 33.322, 31.556, 28.229, 28.381, 30.76, 32.314, 27.998, 50.34, 31.122, 33.564, 28.22, 28.991, 79.316, 67.092, 54.148, 39.79, 43.149, 27.776, 30.95, 36.978, 60.312, 36.69, 41.294, 32.924, 31.141, 59.422, 32.28, 48.836, 30.099, 34.109, 31.326, 42.59, 37.469, 31.093, 29.663, 34.707, 29.533, 29.671, 29.644, 54.168, 43.491, 30.983, 30.978, 32.58, 29.548, 30.117, 28.613, 99.815, 28.756, 95.82, 32.318, 28.395, 59.866, 39.691, 47.015, 28.565, 29.582, 31.043, 31.576, 40.321, 30.36, 41.613, 28.495, 27.593, 29.115, 27.575, 28.509, 27.098, 28.017, 31.484, 41.166, 28.06, 27.592, 28.172, 27.225, 27.202, 27.003, 27.255, 29.243, 36.297, 28.683, 27.068, 32.872, 27.102, 27.089, 26.983, 29.21, 43.407, 31.06, 31.054, 29.37, 37.758, 28.046, 35.592, 29.046, 27.013, 57.726, 29.594, 26.996, 27.671, 26.703, 27.517, 29.036, 26.244, 27.935, 28.786, 28.02, 27.575, 35.009, 28.606, 30.131, 87.92],
        "nathan" : [45.827, 32.832, 39.568, 51.928, 32.808, 31.069, 28.184, 35.257, 33.547, 32.878, 29.546, 28.701, 36.347, 35.697, 35.517, 39.22, 37.608, 35.089, 47.732, 29.324, 49.17, 42.241, 35.065, 33.027, 37.153, 45.828, 33.124, 36.095, 32.669, 32.309, 28.763, 37.186, 28.838, 28.583, 40.626, 28.728, 34.689, 29.26, 31.847, 42.448, 32.831, 69.856, 39.765, 41.743, 46.812, 29.488, 37.665, 40.352, 36.244, 32.77, 52.948, 38.789, 33.43, 57.248, 32.371, 57.289, 29.904, 41.539, 29.775, 29.636, 30.678, 36.406, 43.552, 29.584, 30.459, 37.42, 31.471, 29.798, 29.771, 57.618, 45.294, 32.753, 32.073, 29.934, 30.167, 29.322, 29.606, 95.994, 29.707, 29.283, 91.779, 28.431, 30.51, 66.36, 28.853, 45.685, 28.804, 32.466, 31.652, 43.342, 37.004, 30.184, 59.309, 27.14, 31.531, 26.676, 28.312, 26.728, 30.277, 27.661, 42.127, 27.238, 28.018, 26.742, 27.26, 33.097, 27.215, 27.68, 29.542, 29.816, 27.629, 26.55, 26.949, 31.401, 26.984, 27.504, 26.545, 28.793, 37.38, 35.964, 29.87, 27.965, 35.724, 28.398, 32.936, 31.083, 26.884, 27.873, 44.368, 27.955, 28.658, 27.522, 27.981, 28.812, 26.815, 26.276, 34.892, 30.168, 26.43, 25.927, 35.737, 25.892, 30.737, 88.979],        
        "joe" : [37.864, 30.185, 31.07, 52.101, 34.376, 34.652, 31.802, 30.649, 32.903, 32.91, 31.437, 32.826, 44.977, 40.185, 35.302, 42.152, 29.259, 28.712, 49.809, 36.291, 49.907, 42.881, 31.546, 41.409, 41.944, 37.873, 37.612, 35.616, 28.812, 29.731, 37.72, 30.61, 30.151, 40.747, 32.136, 35.428, 29.219, 30.591, 42.537, 30.62, 70.395, 38.545, 44.124, 44.983, 37.423, 41.078, 33.506, 30.931, 59.56, 36.778, 43.342, 33.312, 29.525, 58.368, 32.054, 41.618, 31.852, 31.468, 29.974, 29.448, 48.119, 29.55, 34.725, 36.449, 33.192, 29.921, 29.158, 73.225, 36.619, 37.097, 30.307, 30.463, 33.113, 29.793, 98.984, 33.202, 29.184, 94.76, 28.898, 76.093, 38.955, 65.776, 36.338, 34.389, 40.337, 38.657, 34.303, 39.488, 33.161, 30.13, 30.435, 28.127, 29.541, 31.746, 31.0, 47.515, 30.956, 28.411, 27.684, 27.703, 27.988, 27.887, 27.738, 27.365, 30.406, 27.919, 28.022, 33.19, 27.755, 28.615, 28.625, 32.59, 34.292, 34.916, 29.86, 30.322, 41.545, 32.317, 35.692, 28.694, 30.341, 32.912, 41.302, 27.483, 27.632, 28.559, 27.899, 28.437, 29.709, 30.453, 33.079, 37.118, 69.06, 30.682, 33.048],
        "taylor_m" : [42.555, 32.232, 34.937, 39.864, 36.84, 30.032, 29.832, 29.739, 29.64, 32.717, 31.77, 31.823, 31.912, 47.197, 38.411, 33.307, 43.548, 28.997, 40.628, 45.41, 49.915, 42.409, 30.843, 53.425, 48.751, 29.749, 36.12, 37.532, 28.801, 28.226, 36.021, 30.687, 28.508, 39.399, 39.265, 34.576, 30.088, 36.688, 40.574, 28.627, 73.036, 33.188, 40.675, 45.307, 30.993, 54.112, 36.458, 33.74, 51.073, 31.089, 29.54, 32.36, 32.914, 78.142, 39.008, 31.681, 30.584, 29.921, 28.988, 46.982, 29.829, 32.092, 29.218, 31.547, 30.636, 28.825, 30.35, 29.535, 60.106, 45.579, 35.942, 33.496, 33.094, 28.534, 29.375, 30.604, 100.535, 32.03, 95.517, 30.684, 30.38, 98.241, 48.028, 31.25, 29.569, 31.912, 38.807, 33.188, 38.814, 30.073, 28.741, 35.086, 28.393, 29.2, 28.632, 28.598, 38.52, 29.41, 34.223, 27.812, 32.149, 27.684, 32.473, 28.604, 29.101, 29.059, 28.628, 27.183, 30.944, 29.225, 28.523, 27.872, 27.4, 34.94, 40.965, 28.371, 28.679, 56.533, 29.53, 37.436, 28.226, 27.463, 46.699, 29.324, 27.599, 27.574, 28.35, 27.868, 27.624, 27.829, 27.62, 30.341, 28.706, 27.673, 34.12, 29.472, 29.471, 92.013],
        "harrison" : [32.452, 32.294, 65.005, 32.807, 29.987, 31.547, 32.579, 32.18, 32.199, 36.634, 33.203, 43.148, 39.447, 41.749, 39.459, 32.379, 47.937, 29.743, 49.227, 43.704, 40.736, 38.387, 40.558, 35.86, 35.312, 37.115, 31.164, 30.375, 44.304, 28.996, 51.551, 43.133, 38.142, 29.238, 32.815, 36.404, 40.556, 70.698, 37.291, 45.147, 42.015, 29.187, 37.49, 47.613, 51.088, 33.9, 33.189, 33.759, 34.486, 63.08, 37.031, 32.483, 30.449, 33.815, 30.737, 50.022, 30.237, 29.951, 29.435, 32.686, 36.188, 31.15, 32.034, 88.318, 31.145, 31.029, 30.227, 29.717, 31.157, 30.397, 30.046, 94.907, 29.418, 92.007, 32.35, 29.766, 70.322, 29.001, 43.456, 31.363, 33.045, 31.791, 56.183, 31.482, 48.062, 29.898, 29.061, 28.527, 28.274, 28.798, 27.998, 32.872, 35.261, 35.812, 28.453, 31.529, 28.518, 28.359, 30.039, 28.833, 27.366, 28.715, 28.425, 30.883, 27.935, 32.742, 28.924, 30.641, 26.982, 32.264, 36.103, 42.598, 28.808, 29.463, 27.106, 37.049, 28.896, 35.638, 28.944, 28.521, 59.397, 35.206, 27.678, 28.371, 30.158, 27.716, 28.342, 29.399, 29.433, 28.366, 28.164, 33.564, 31.621, 31.828, 34.201],
        "yousef" : [43.535, 37.295, 43.214, 38.859, 31.0, 34.33, 37.596, 39.979, 35.296, 37.432, 39.645, 48.065, 57.281, 43.312, 31.19, 39.006, 46.744, 49.962, 43.902, 38.489, 36.391, 43.214, 40.236, 35.798, 35.297, 30.956, 83.808, 31.085, 64.209, 31.309, 37.139, 31.09, 36.182, 40.716, 32.715, 73.96, 77.721, 43.194, 30.846, 44.199, 60.957, 48.116, 44.017, 38.001, 37.353, 68.118, 49.162, 34.467, 38.832, 34.652, 76.943, 35.165, 33.031, 33.384, 33.616, 31.41, 35.086, 38.412, 71.484, 40.086, 35.956, 34.296, 33.847, 32.838, 35.087, 103.5, 31.664, 94.412, 34.534, 32.388, 69.363, 32.587, 44.768, 30.956, 29.607, 30.554, 56.387, 29.566, 45.708, 32.872, 31.709, 30.341, 30.253, 30.74, 30.391, 33.856, 47.003, 29.692, 32.807, 29.665, 30.218, 32.28, 30.134, 33.356, 29.222, 29.259, 28.874, 34.125, 29.863, 32.098, 28.56, 34.089, 44.622, 33.925, 31.267, 28.829, 38.132, 28.579, 39.31, 28.95, 28.491, 46.38, 29.735, 29.236, 29.129, 27.906, 29.669, 31.486, 52.086, 32.68, 28.573, 30.885, 36.991, 32.131, 31.713],
        "declan" : [48.034, 47.556, 38.948, 32.876, 30.982, 36.171, 35.53, 31.227, 36.3, 32.193, 46.585, 39.176, 43.293, 38.7, 31.128, 36.838, 43.704, 85.537, 34.839, 30.914, 42.442, 71.156, 40.556, 32.31, 29.481, 30.081, 36.592, 31.906, 29.722, 39.463, 31.539, 37.871, 32.27, 33.713, 38.888, 33.8, 79.041, 81.135, 41.883, 30.677, 45.197, 48.579, 57.42, 32.794, 31.336, 30.108, 33.032, 29.814, 29.154, 29.201, 36.297, 33.962, 30.562, 29.428, 30.616, 31.01, 30.712, 28.843, 29.062, 27.847, 29.252, 27.661, 30.835, 33.198, 27.264, 27.959, 28.609, 34.95, 43.179, 34.11, 30.766, 30.594, 37.161, 52.907, 29.049, 28.692, 33.254, 39.483, 28.697, 29.411, 28.374, 28.732, 29.477, 29.328, 27.788, 28.521, 27.834, 27.575, 38.134, 30.536, 31.743, 37.555],
        "taylor_s" : [40.017,32.284,36.322,39.473,39.564,30.302,30.944,42.294,33.711,44.633,30.955,31.195,46.734,38.706,40.535,37.560,29.267,34.670,46.041,39.562,44.954,36.200,29.845,42.393,38.975,39.792,32.346,34.205,29.522,29.134,29.988,35.835,29.334,37.675,37.028,35.752,28.845,29.316,32.693,36.879,28.583,72.755,38.845,36.898,40.809,30.863,32.726,33.516,56.712,35.636,38.008,31.642,30.936,60.793,34.443,38.699,30.964,33.052,31.628,30.642,47.172,30.230,34.000,32.768,31.767,30.574,32.826,52.580,41.383,31.813,36.419,38.862,30.486,28.679,30.228,93.952,30.511,95.268,30.480,29.759,55.497,43.756,47.113,29.116,28.394,32.943,32.679]
        }


    @commands.command()
    async def laps(self, ctx, name:str=None, amount:int=12):
        if amount > 25:
            await ctx.send(embed=discord.Embed(title=f"{emojis['warning']} That is too many laps for me to show, sorry!", color=0xff0000))
            return
        if amount <= len(self.times[f'{name.lower()}']):
            amount 
        else:
            amount = len(self.times[f'{name.lower()}'])
        result = sorted(self.times[f'{name.lower()}'], key=float)
        print(result)
        embed=discord.Embed(
            title = f"This is {name}'s fastest {amount} laps",
            color=0x3bf4a2
        )
        if amount == 0:
            embed.set_footer(text="That does not count as a zero second lap!")
        for x in range(0,amount):
            embed.add_field(name=f"Lap {x+1}", value=f"{result[x]}", inline=False)
        await ctx.send(embed=embed)
        
    @commands.command(aliases=['vs','head_to_head','h2h'])
    async def versus(self, ctx, name1:str, name2:str, amount:int):
        if amount <= len(self.times[f'{name1}']) and amount <= len(self.times[f'{name2}']):
            sorted_name_1 =  sorted(self.times[f'{name1}'], key=float)
            sorted_name_2 =  sorted(self.times[f'{name2}'], key=float)
        page1 = discord.Embed(title = f"Page 1 - {name1} vs {name2}", color = 0xFFFAFA)
        try:
            for x in range(0,5):
                page1.add_field(
                    name = f"{name1} Lap {x+1}",
                    value = f"{sorted_name_1[x]}s."
                )
                page1.add_field(
                    name = f"{emojis['trophy']} **~~~~~~~~~~~~-----~~~~~~~~~~~~** {emojis['redtick']}" if sorted_name_1[x] < sorted_name_2[x] else f"{emojis['redtick']} **~~~~~~~~~~~~~-----~~~~~~~~~~~** {emojis['trophy']}",
                    value = f"The lap winner is {name1 if sorted_name_1[x] < sorted_name_2[x] else name2}\nThey won by {round(abs(sorted_name_1[x] - sorted_name_2[x]),4)}s."
                )
                page1.add_field(
                    name = f"{name2} Lap {x+1}",
                    value = f"{sorted_name_2[x]}s."
                )
        finally:
            await ctx.send(embed=page1)

    @commands.command()
    async def average(self, ctx, name:str, time_under:float=None):
        embed1= discord.Embed(title=f"Here is {name}'s average lap time", color=0xFFFFFE)
        average = sum(self.times[f'{name}']) / len(self.times[f'{name}'])
        average_under, lap_count = 0,0
        if time_under is not None:
            for x in self.times[f'{name}']:
                if x < time_under:
                    average_under += x
                    lap_count += 1
            average_under = round(average_under / lap_count, 4) if not lap_count == 0 else "N/A"
            embed1.set_footer(text = f"This was over {lap_count} laps, all under {time_under}s")
            embed1.description = f"{average_under}s."

        else:
            embed1.description = f"{average}s."
            embed1.set_footer(text = f"This was over {len(self.times[f'{name}'])} laps.")


        await ctx.reply(embed=embed1)

    @commands.command(aliases=['best_avg', 'b_avg'])
    async def best_average(self, ctx, name:str, amount:int):
        total = 0
        times = sorted(self.times[f'{name}'], key=float)
        embed1 = discord.Embed(
            title = f"Here is {name}'s average lap time",
            color = 0x00ff00
        )
        for x in range(0, amount):
            total += times[x]
        avg_time = total / amount
        embed1.description = f"{avg_time}s"
        embed1.set_footer(text=f"This was over {name}'s best {amount} laps.")
        await ctx.send(embed=embed1)


def setup(bot):
    bot.add_cog(race_times(bot))